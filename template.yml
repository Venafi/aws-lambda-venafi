AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Venafi policy integration for AWS Private CA.
Parameters:
  TPPUSER:
    Type: String
    Default: ""
  TPPPASSWORD:
    NoEcho : "true"
    Type: String
    Default: ""
  TPPURL:
    Type: String
    Default: ""
  CLOUDURL:
    Type: String
    Default: ""
  CLOUDAPIKEY:
    NoEcho : "true"
    Default: ""
    Type: String
  ZONE:
    Default: ""
    Type: String
Resources:
  #TODO: add DynamDB items with policy names
  #TODO: add ACM PCA configuration ( or maybe do it in separated template
  CertRequestLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: cert-request
      Runtime: go1.x
      CodeUri: dist/cert-request
      Description: Venfi request with a RESTful API endpoint using Amazon API Gateway.
      MemorySize: 512
      Timeout: 10
      #TODO: get role from parameters
      #TODO: attach AWSCertificateManagerPrivateCAUser role to Lambda
      #TODO: provide json for creating a role
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/lambda-venafi-role'
      Environment:
        Variables:
          S3_BUCKET: cert-request-lambda
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:GetItem'
                - 'dynamodb:PutItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/CertPolicyTable'
      Events:
        ApiRequest:
          Type: Api
          Properties:
            Path: /request
            Method: POST
  CertPolicyLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: cert-policy
      Runtime: go1.x
      CodeUri: dist/cert-policy
      Description: Venfi policy with a RESTful API endpoint using Amazon API Gateway.
      MemorySize: 512
      Timeout: 10
      #TODO: get role from parameters
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/lambda-venafi-role'
      Environment:
        Variables:
          TPPUSER:
            Fn::Sub: ${TPPUSER}
          TPPPASSWORD:
            Fn::Sub: ${TPPPASSWORD}
          TPPURL:
            Fn::Sub: ${TPPURL}
          CLOUDURL:
            Fn::Sub: ${CLOUDURL}
          CLOUDAPIKEY:
            Fn::Sub: ${CLOUDAPIKEY}
          ZONE:
            Fn::Sub: ${ZONE}
          S3_BUCKET: cert-policy-lambda
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:DeleteItem'
                - 'dynamodb:GetItem'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/CertPolicyTable'
#      Events:
#        Cron:
#          Type: Schedule
#          Properties:
#            Rate: cron(*/5 * * * ? *)
#            Enabled: true
#  ScheduledRuleSourceMapping:
#    Type: AWS::Lambda::EventSourceMapping
#    Properties:
#      EventSourceArn: !GetAtt ScheduledRule.Arn
#      FunctionName: !Ref CertPolicyLambda
#      Enabled: true

  CertPolicyTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: cert-policy
      AttributeDefinitions:
        - AttributeName: PolicyID
          AttributeType: S
      KeySchema:
        - AttributeName: PolicyID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(1 minute)"
      State: "ENABLED"
      Targets:
        - Arn: !Sub ${CertPolicyLambda.Arn}
          Id:
            Ref: CertPolicyLambda

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CertPolicyLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CertPolicyLambda.Arn

  RequestLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref CertRequestLambda]]
      RetentionInDays: 7 # days

  PolicyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref CertPolicyLambda]]
      RetentionInDays: 7 # days
Outputs:
  # This API creates a role and manages Venafi policies for enrolling certificates with an Amazon private CA.
  # To find out more about implicit resources, you can review Serverless Application Model (SAM) that is generated.
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CertRequestApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Stage/request/"